interfaz Elemento {  real verificar(); }

constante real SIN_CALCULAR = // Cualquier valor que no utilicemos

clase Hecho impl Elemento {  
  	lista<Regla> antecedentes
  	real factorCerteza
  	cadena nombre
  	// Constructor 
	real verificar(){
		si factorCerteza == SIN_CALCULAR{
			//Utilizo iteradores para que sea mÃ¡s conciso
			factorCerteza = caso2(antecedentes.itr().map(t-> t.evaluar()).collect())
		}
   		return factorCerteza;  
  	}
}
clase HechoAND impl Elemento{
  lista<T impl Elemento> antecedentes

  	real verificar(){ // Caso 1
		return antecedente.itr().map(m -> m.evaluar()).max();
  	}
}
clase HechoOR impl Elemento{
	lista<T impl Elemento> antecedentes

	real verificar(){// Caso 1
		return antecedente.itr().map(m -> m.evaluar()).min();
	}
}
clase Regla impl Elemento{
	<T impl Elemento> antecedente
	real factorCerteza
	cadena nombre

	real verificar() { // Caso 3
		return factorCerteza * max(0, antecedente.verificar())
	}
}


real caso2(list<real> antecedentes){
    si antecedentes.vacia()
    {
        imprimir("Error, comportamiento incierto en caso2")
        return 0
    }

    si antecedentes.longitud() == 1 :
        return  antecedentes[0]

    si antecedentes.longitud() == 2 :
        return  caso2Simple(antecedentes[0], antecedentes[1])
    
    double valor = reglas[0].verificar();
	para (entero i = 1; i < antecedentes.tamanno(); ++i)
	{
		valor = caso2Simple(valor,reglas[i].verificar())
	}
	return valor
}

real caso2Simple(double valor1, double valor2){
    si (valor1 >= 0 && valor2 >= 0)
        return valor1 + valor2 * (1 - valor1)

    si (valor1 <= 0 && valor2 <= 0)
        return valor1 + valor2 * (1 + valor1)
	
	return (valor1 + valor2) / (1.0 - min(absoluto(valor1), absoluto(valor2)))
}