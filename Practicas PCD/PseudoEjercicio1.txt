// Variables goblales
arrayLectura: array[110] de entero
arrayEscritura: array[11] de entero
semaforoEscritura: semaphore
semaforoConsumidor: semaphore
semaforoSumador: array[10] de semaphore

process type generador():
begin
	// Calculo
	total = arrayEscritura[0];

	// El arrayLectura se divide en grupos de once (de ahí mod 11) y dentro de esos
	// grupos, si se empieza a contar por 0, los que son pares son números y los
	// impares operaciones (de ahí mod 2).
	for i = 0 .. len(arrayLectura)-1:
		if i%11%2 == 0 then // Comprobamos si es posición de entero
			arrayLectura[i] = RandomInt(/*Rango no especificado en ejercicio*/);
		else  // Sino es de operación
			arrayLectura[i] = RandomInt(min=1,max=3);
		finif
	finfor

	/* Versión alternativa, condición simple:
		for i=0; i<len(arrayLectura); i+=11 do
			for j=0; j<11; j++ do
				if j%2 == 0 then // Si par es posición de entero
					arrayLectura[i+j] = RandomInt(/*Rango no especificado en ejercicio*/);
				else  // Sino es de operación
					arrayLectura[i+j] = RandomInt(min=1,max=3);
				finif
			finfor
		finfor
		*/

	wait(semaforoEscritura); // No debería ser necesario porque es el primero
	writeln("Generador terminado.");
	signal(semaforoEscritura);

	signal(semaforoConsumidor);
end;

// También se puede calcular el inicio y final dentro del proceso, 
// pero para ello tendríamos que asumir que la distancia entre inicio y final
// es de 11, de esta manera funciona para cualquier N donde el primer elemento 
// es un número y la distancia enter inicio y final es impar. 
// Si fuera par funcionaría pero la última operación se la compería 
proccess type consumidor (id:entero, inicio:entero, final: entero)
begin 
	total: entero
	operación: entero
	temp: entero
end;
begin
	// Espera a que el generador termine
	wait(semaforoConsumidor);
	// Cuando se despierta, levanta al siguiente
	signal(semaforoConsumidor);
	// Inicialización variables
	operación = 0;

	// Guardamos el valor del primer elemento pues se añade
	// al total de forma diferente al resto.
	total = arrayLectura[inicio];

	// Recorremos solo los números (posiciones impares en el grupo de 11 si se empieza
	// por 1, y pare si se empieza por 0), y consideramos el espacio anterior de
	// operación.
	i = inicio+2;
	while i<=final then
		temp = arrayLectura[i] // guardamos en local por buenas prácticas
		operación = arrayLectura[i-1]
		total = calcular(total, temp, operación)
		i+=2
	finwhile

	arrayEscritura[id] = total; // Guardar resultado en global
	// La sección crítica solo requiere el uso de la salida
	wait(semaforoEscritura);
	writeln(id,total); // Imprimir el mensaje
	signal(semaforoEscritura);
	signal(semaforoSumador[id]);
end;


/* 	Función que realiza una operación sobre los números num1 y num2
	según el valor de op
	Si el valor de op es:
		1 - Suma
		2 - resta
		3 - Multiplicación
		otro - error
*/
entero function calcular(num1: entero, num2: entero, op: entero)
begin	
	total:entero;
end;
begin
	switch temp then
		case 1:
			total = num1 + num2;		
		case 2:
			total = num1 - num2;
		case 3:
			total = num1 * num2;
		default:
			// Lanzar error
	finswitch
	return total
end;

/* 	Caculamos la suma de todos los valores guardados en
	el array de escritura.
*/

process type sumador():
begin
	total:entero // Esta variable puede ser global si queremos utilizar el total en el main
end
begin
	// Cada consumidor hace un signal, cuando todos hallan terminado,
	// entonces podemos sumar.
	for i:=0.. len(semaforoSumador) do:
		wait(semaforoSumador[i]);
	// Calculo
	total = arrayEscritura[0];
	for i = 1 .. len(arrayEscritura)-1:
		total += arrayEscritura[i];

	wait(semaforoEscritura); // No debería ser necesario porque es el último
	writeln("Sumador terminado. Total:", total);
	signal(semaforoEscritura);

	// OPTIONAL: Se pueden "liberar" los semáforos
	for i:=0.. len(semaforoSumador) do:
		signal(semaforoSumador[i]);
end;



main()
begin
	procesos: array[1..11] de process; // De Process consumidor
	solución: entero;
end
begin


	writeln("Comienzo de ejecución");

	// Inicialización de semáforos
	initial(semaforoEscritura, 1)
	initial(semaforoConsumidor, 0)
	for i =0..len(semaforoSumador) do
		initial(semaforoSumador[i],0)

	// Definimos consumidores,
	for i = 0 .. len(arrayEscritura)-1 do
		procesos[i] = consumidor(i, i*11, (i+1)*11-1)
	
	// lanzar procesos
	cobegin 
	generador().launch(); // No inicializo porque no argumentos
	for i = 0 .. len(arrayEscritura)-1 do
		procesos[i].launch();
	sumador().launch(); // No inicializo porque no argumentos
	coend;

	writeln ("Procesos terminados");
end;
